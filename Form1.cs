using System;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using CraigLib;
using CraigLib.Data;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.Utils.Extensions;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.Services;
using DevExpress.XtraTreeList;
using DevExpress.XtraWaitForm;
using UniversalReferenceDataEditor.Properties;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Common;
using UniversalReferenceDataEditor.Commands;
using UniversalReferenceDataEditor.Data;


namespace UniversalReferenceDataEditor
{
    public partial class Form1 : DevExpress.XtraBars.FluentDesignSystem.FluentDesignForm, ILazyLoad
    {
        private readonly string _conString = ConfigurationManager.ConnectionStrings["default"].ConnectionString;
        private string _currentDatabase = string.Empty;
        private string _currentTableName = string.Empty;
        private readonly DatabaseSelector _dbSelector;
        private int _originalExStyle = -1;
        private bool enableFormLevelDoubleBuffering = true;
        private readonly int _rowWarningThreshold =
            Convert.ToInt32(ConfigurationManager.AppSettings["RowWarningThreshold"]);

        private bool _limitSqlToSpinEdit;
        public Database Database { get; set; }
        public int RowCount { get; private set; }
        private int _highWaterMark;

        public Form1()
        {
            InitializeComponent();
           
            SuspendDrawing(treeList1);
            SuspendDrawing(tableDataGrid);
            SuspendDrawing(splitContainerControl);
            SuspendDrawing(splitContainerControl2);
            SuspendDrawing(sqlEditControl);
            labelControl3.Text = Resources.InitializingForm1;
            fileOpenItem1.Enabled = true;
            fileSaveItem1.Enabled = true;
            gridView1.DataSourceChanged += DataSourceChanged;
            treeList1.FocusedNodeChanged += TreeListTableClicked;
            InitTableList();
            InitGrid();
            RowCount = _highWaterMark = 0;
            Text = Resources.VersionString + AssemblyInfo.Version;
            maxResultLimitBarItem.EditValue = 250000;
            sqlEditControl.Text = "";
            sqlEditControl.ReplaceService<ISyntaxHighlightService>(new SyntaxHighlightService(sqlEditControl.Document));
            sqlEditControl.ReplaceService<IRichEditCommandFactoryService>(
                new CustomRichEditCommandFactoryService(sqlEditControl,sqlEditControl.GetService<IRichEditCommandFactoryService>()));
            _dbSelector = new DatabaseSelector(Database);
            labelControl3.Text = Resources.IntializingDataSourcesForm1;
            // This line of code is generated by Data Source Configuration Wizard
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            unboundSource1.SetRowCount(unboundSource1.Count);
            // This line of code is generated by Data Source Configuration Wizard
            unboundSource1.ValueNeeded += UnboundSource1_ValueNeeded;
            // This line of code is generated by Data Source Configuration Wizard
            unboundSource1.ValuePushed += UnboundSource1_ValuePushed;
            ResumeDrawing(treeList1);
            ResumeDrawing(tableDataGrid);
            ResumeDrawing(splitContainerControl);
            ResumeDrawing(splitContainerControl2);
            ResumeDrawing(sqlEditControl);
        }

        public sealed override string Text
        {
            get => base.Text;
            set => base.Text = value;
        }

        private void InitTableList()
        {
            InitData();
            DataBinding();
            barButtonItem1.Caption = Resources.HideTables;
        }

        private async void DataSourceChanged(object sender, EventArgs e)
        {
            await Task.Factory.StartNew(UpdateGridKeys).ConfigureAwait(false);
            await Task.Factory.StartNew(SetBestFit).ConfigureAwait(false);
        }
        private void TreeListTableClicked(object sender, FocusedNodeChangedEventArgs e)
        {
            labelControl3.Text = Resources.RetrievingDataNow;
            if (e.Node.Level == 0)
                return;
            var sw = new Stopwatch();
            sw.Start();
            var qr = new QueryRunningForm {ShowOnTopMode = ShowFormOnTopMode.AboveParent, Width = 800, Height = 350};
            qr.Show(this);
            var rowReturn = 0;
            if (Convert.ToInt32(maxResultLimitBarItem.EditValue) > 0)
                rowReturn = Convert.ToInt32(maxResultLimitBarItem.EditValue);
            var selectedText = e.Node.GetDisplayText(1);
            _currentDatabase = e.Node.ParentNode.GetDisplayText(1);
            if (string.IsNullOrEmpty(selectedText) || string.IsNullOrEmpty(_currentDatabase))
                return;
            
            var sb = new StringBuilder();
            sb.Append("select ");
            if (rowReturn > 0)
                sb.AppendFormat("top {0} ", rowReturn);
            sb.AppendFormat("* from {0} (nolock)", selectedText);
            qr.SetCaption($"Running query : {sb}");
            sqlEditControl.Text = sb.ToString();
            var xLoc = (Location.X + Width) / 2;
            var yLoc = (Location.Y + Height) / 2;
            qr.Location = new Point(xLoc, yLoc);
            tableDataGrid.DataBindings.Clear();
            gridView1.Columns.Clear();
            if (ValidateSql(selectedText, sb.ToString()))
            {
                RunAndProcessDataAsync(sb.ToString());
            }
            sw.Stop();
            barHeaderItem1.Caption = Resources.PreperatingDataForm1;

            var resultText = Resources.VersionString + string.Format(Resources.RunReturnedRowsInMilliseconds,
                                string.Concat( _currentDatabase ,"/", selectedText), gridView1.RowCount, sw.ElapsedMilliseconds);

            if (InvokeRequired)
                BeginInvoke((Action) (() =>
                {
                    Text = resultText;
                    qr.Hide();
                }));
            else
            {
                Text = resultText;
                qr.Hide();
            }
        }

        private async void RunAndProcessDataAsync(string sql)
        {
            tableDataGrid.DataSource = null;
            var task = await Task.Factory.StartNew(() => RunSql(sql)).ConfigureAwait(false);
            var dt = task;

            if (tableDataGrid.InvokeRequired)
                tableDataGrid.BeginInvoke((Action) (() =>
                {
                    tableDataGrid.DataSource = dt;
                    RowCount = dt.Rows.Count;
                }));
            else
            {
                tableDataGrid.DataSource = dt;
                RowCount = dt.Rows.Count;
            }
        }

        private async void HighPerformanceBestFit()
        {
            if (labelControl3.InvokeRequired)
                labelControl3.BeginInvoke((Action) (() =>
                    {
                        labelControl3.Text = Resources.ColumnWidthUpdating;
                    }));
            var dv = gridView1.DataSource as DataView;
            var dt = dv?.Table;
            if(dt is null)
                return;
            for (var i = 0; i < gridView1.Columns.Count; i++)
            {
                if(i>gridView1.Columns.Count)
                    return;
                var current = gridView1.Columns[i].Width;
                var task = await Task.Factory.StartNew(() =>
                {
                    var max = 0;
                    foreach (DataRow r in dt.Rows)
                    {
                        if (r.ItemArray.Length - 1 < i)
                            return max;
                        if (dt.Columns[i].Caption.Length * 10 > max)
                            max = dt.Columns[i].Caption.Length * 10;
                        if (r[i].ToString().Length * 9 > max)
                            max = (r[i].ToString().Length * 9);
                    }
                    return max;
                });
                if (!tableDataGrid.InvokeRequired) continue;
                if (gridView1.Columns[i].Width >= task) continue;
                var i1 = i;
                if (labelControl3.InvokeRequired)
                    labelControl3.BeginInvoke((Action) (() =>
                    {
                        labelControl3.Text = string.Format(Resources.updating_Column, gridView1.Columns[i1].Caption);
                    }));
                tableDataGrid.BeginInvoke((Action) (() => { gridView1.Columns[i1].Width = task; }));
            }

            if (labelControl3.InvokeRequired)
                labelControl3.BeginInvoke((Action) (() =>
                {
                    labelControl3.Text = Resources.Donezo;
                }));
            RowCount = dt.Rows.Count;
        }

        private async void SetBestFit()
        {
            await new Task(HighPerformanceBestFit);
        }

        private bool ValidateSql(string nodeText, string sql)
        {
            using (var sqlCon = new SqlConnection(_conString))
            {

                if (!string.IsNullOrEmpty(nodeText))
                {
                    var serverConnection = new ServerConnection(sqlCon);
                    var server = new Server(serverConnection);
                    var database = server.Databases[_currentDatabase];
                    foreach (Table table in database.Tables)
                    {
                        if (nodeText != table.Name)
                            continue;
                        if (Convert.ToInt32(maxResultLimitBarItem.EditValue) >= 1 || table.RowCount <= _rowWarningThreshold) continue;
                        var result =
                            MessageBox.Show(string.Format(Resources.ThisIsAHUGEQuery, table.Name, table.RowCount),
                                Resources.WarningPromptHere, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (result == DialogResult.No)
                            return false;
                    }

                    _currentTableName = nodeText;
                }
            }

            //Todo: validate the sql further
            if (sql.ToLower().Contains("insert") || sql.ToLower().Contains("delete") ||
                sql.ToLower().Contains("truncate") || sql.ToLower().Contains("drop") || sql.ToLower().Contains("alter"))
            {
                MessageBox.Show(Resources.NotAllowedToDoThatString, Resources.Nope, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }

            if (!sql.ToLower().Contains("select") &&
                (!sql.ToLower().Contains("exec") || !sql.ToLower().Contains("execute")))
            {
                MessageBox.Show(Resources.NoActionSelectedString);
                return false;
            }

            if (sql.ToLower().Contains("from")) return true;
            MessageBox.Show(Resources.ThereNeedsToBeAFromClauseString);
            return false;
        }

        private DataTable RunSql(string sql)
        {
            var dt = new DataTable();
            using (var sqlCon = new SqlConnection(_conString))
            {
                if (sqlCon.State == ConnectionState.Closed)
                    sqlCon.Open();
                sqlCon.ChangeDatabase(_currentDatabase);
                DatabaseHelper.FillDataTable(dt, sql, sqlCon);
                dt.ExtendedProperties.Add("SelectSql", sql);
            }
            return dt;
        }

        private async void UpdateGridKeys()
        {
            try
            {
                if (tableDataGrid.InvokeRequired)
                {
                    if (!(tableDataGrid.DataSource is DataTable dt)) return;
                    var keys = dt.PrimaryKey;
                    foreach (DataColumn dataColumn in dt.Columns)
                    {
                        var key = keys.IndexOf(x => x.ColumnName == dataColumn.ColumnName);

                        var gc = new GridColumn();
                        if (key > -1)
                        {
                            tableDataGrid.BeginInvoke((Action) (() =>
                            {
                                gridView1.Columns[key].OptionsColumn.AllowEdit = false;
                            }));
                            tableDataGrid.BeginInvoke((Action) (() =>
                            {
                                gridView1.Columns[key].AppearanceHeader.BackColor =
                                    Color.FromArgb(220, 64, 128, 64);
                            }));
                            tableDataGrid.BeginInvoke((Action) (() =>
                            {
                                gridView1.Columns[key].AppearanceCell.BackColor =
                                    Color.FromArgb(220, 64, 128, 64);
                            }));
                        }
                        else
                        {
                            tableDataGrid.BeginInvoke((Action) (() => { gc.Caption = dataColumn.Caption; }));
                            tableDataGrid.BeginInvoke((Action) (() => { gc.MaxWidth = 400; }));
                            tableDataGrid.BeginInvoke((Action) (() => { gc.GetBestWidth(); }));
                            tableDataGrid.BeginInvoke((Action) (() => { gridView1.Columns.Add(gc); }));
                        }
                    }

                    var qr = new QueryRunningForm
                    {
                        ShowOnTopMode = ShowFormOnTopMode.AboveParent, Width = 800, Height = 350,
                        Text = Resources.GridIsFormatting
                    };

                    if (qr.InvokeRequired)
                        qr.BeginInvoke((Action) (() => { qr.Show(this); }));
                    if (tableDataGrid.InvokeRequired)
                    {
                        await Task.Factory.StartNew(HighPerformanceBestFit);
                    }

                    if (qr.InvokeRequired)
                        qr.BeginInvoke((Action) (() => { qr.Hide(); }));

                }
                else
                {
                    if (!(tableDataGrid.DataSource is DataTable dt)) return;
                    var keys = dt.PrimaryKey;
                    foreach (DataColumn dataColumn in dt.Columns)
                    {
                        var isKey = keys.IndexOf(x => x.ColumnName == dataColumn.ColumnName);

                        var gc = new GridColumn();
                        if (isKey > -1)
                        {
                            gc.Caption = dataColumn.Caption + Resources.KeyString;
                            gc.OptionsColumn.AllowEdit = false;
                            gc.AppearanceCell.BackColor = Color.FromArgb(220, 64, 128, 64);
                        }
                        else
                            gc.Caption = dataColumn.Caption;

                        gc.MaxWidth = 400;
                        gc.GetBestWidth();
                        gridView1.Columns.Add(gc);
                    }
                }
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }

        }

        private void InitData()
        {
            Database = new Database();
            using (var sqlCon = new SqlConnection(_conString))
            {
                sqlCon.Open();
                var databases = sqlCon.GetSchema("Databases");

                foreach (DataRow row in databases.Rows)
                {
                    var dbName = row["database_name"].ToString();
                    Database.Add(new Datatable(dbName, false));
                }

                foreach (var db in Database)
                {
                    var serverConnection = new ServerConnection(sqlCon);
                    var server = new Server(serverConnection);
                    var database = server.Databases[db.Name];
                    foreach (Table table in database.Tables)
                    {
                        var currentDb = Database.FirstOrDefault(x => x.Name == table.Parent.Name);
                        currentDb?.DataTables.Add(new Datatable(table.Name, false));
                    }
                }
            }
        }

        private void DataBinding()
        {
            treeList1.DataSource = Database;
            treeList1.DataMember = Resources.NameColumnString;
            treeList1.Columns["IsTask"].Visible = false;
        }

        private void InitGrid()
        {
            Resize += FormResized;
            FormResized(this, null);
        }

        private void FormResized(object sender, EventArgs e)
        {
            splitContainerControl2.SplitterPosition = Convert.ToInt32(Height * .60);
            splitContainerControl.SplitterPosition = (treeList1.Width);
        }

        private void ApplyChanges(object sender, EventArgs e)
        {
            if (!(tableDataGrid.DataSource is DataTable dataTable))
                return;
            dataTable.TableName = _currentTableName;
            var changes = dataTable.GetChanges();
            if (changes == null)
                return;
            var conInfo = new ConnectionInfo(_conString) {Database = _currentDatabase};
            using (var adapter = new CraigLib.Data.DatabaseAdapter(conInfo))
            {
                adapter.Update(dataTable, false);
            }
        }

        private void ExecuteSqlButtonClick(object sender, EventArgs e)
        {

            var rowReturn = 0;
            if (Convert.ToInt32(maxResultLimitBarItem.EditValue) > 0)
                rowReturn = Convert.ToInt32(maxResultLimitBarItem.EditValue);
            var sw = new Stopwatch();
            sw.Start();
            var sql = sqlEditControl.Text;
            if (!ValidateSql(string.Empty, sql))
                return;

            if (sql.ToLowerInvariant().Contains("select") && !sql.ToLowerInvariant().Contains("top") && rowReturn > 0 &&
                _limitSqlToSpinEdit)
            {
                var newSelect = $"select top {maxResultLimitBarItem.EditValue}";
                var sqlTopped = sql.ToLowerInvariant().Replace("select", newSelect);
                sqlEditControl.Text = sqlTopped;
                sql = sqlTopped;
            }

            var topNumber = Regex.Match(sql, @"\d+").Value;
            if (!string.IsNullOrEmpty(topNumber) && int.Parse(topNumber) != rowReturn)
            {
                //replace the number
                sql = sql.Replace(topNumber, rowReturn.ToString());
            }

            if (string.IsNullOrEmpty(_currentDatabase))
            {
                _dbSelector.ShowDialog(this);
                if (_dbSelector.GetDialogResult() == DialogResult.Cancel)
                    return;
                _currentDatabase = _dbSelector.DatabaseName;
            }

            var dt = new DataTable();
            var localeX = (Location.X + Width / 2);
            var localeY = (Location.Y + Height / 2);
            var qr = new QueryRunningForm
            {
                ShowOnTopMode = ShowFormOnTopMode.AboveParent,
                Width = 800,
                Height = 350,
                Location = new Point(localeX, localeY)
            };
            qr.Show(this);
            if (ValidateSql(string.Empty, sql))
            {
                RunAndProcessDataAsync(sql);
                
            }

            UpdateGridKeys();
            RowCount = dt.Rows.Count;
            sw.Stop();
            var resultText = Resources.VersionString + string.Format(Resources.RunReturnedRowsInMilliseconds,
                                 _currentDatabase, gridView1.RowCount, sw.ElapsedMilliseconds);
            Text = resultText;
            qr.Hide();

        }

        private void BarButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SuspendDrawing(tableDataGrid);
            SuspendDrawing(treeList1);
            e.Item.Caption = e.Item.Caption == Resources.HideTables ? Resources.ShowTables : Resources.HideTables;
            if (e.Item.Caption == Resources.ShowTables)
            {
                treeList1.CollapseToLevel(0);
                splitContainerControl.SplitterPosition = 0;
            }
            else
            {
                treeList1.ExpandAll();
                treeList1.Columns[1].BestFit();
                //set splitter to best fit width or 1/4 of the screen area, whichever is less
                var forthWidth = Width / 4;
                splitContainerControl.SplitterPosition =
                    treeList1.Columns[1].Width < forthWidth ? treeList1.Columns[1].Width : forthWidth;
                FormResized(this, null);
            }
            ResumeDrawing(tableDataGrid);
            ResumeDrawing(treeList1);
        }

        public void SetHighWaterMark(int rowNumber)
        {
            _highWaterMark = rowNumber;
        }

        public int GetHighWaterMark()
        {
            return _highWaterMark;
        }

        public void RetrieveNext()
        {
            throw new NotImplementedException();
        }

        private void barCheckItem1_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            _limitSqlToSpinEdit = barCheckItem1.Checked;
        }

        // This event is generated by Data Source Configuration Wizard
        private void UnboundSource1_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {

            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        private static void UnboundSource1_ValuePushed(object sender,
            DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {

            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }

        private void Form1KeyPress(object sender, KeyPressEventArgs e)
        {


        }

        private async void Form1KeyDown(object sender, KeyEventArgs e)
        {
            if (!(sender is RichEditControl) && !(sender is Form1)) return;
            if (e.KeyCode != Keys.F5) return;
            if (!ValidateSql(string.Empty, sqlEditControl.Text)) return;
            var sw = new Stopwatch();
            var dt = new DataTable();
            var sql = sqlEditControl.Text;
            var localeX = (Location.X + Width / 2);
            var localeY = (Location.Y + Height / 2);
            var qr = new QueryRunningForm
            {
                ShowOnTopMode = ShowFormOnTopMode.AboveParent,
                Width = 800,
                Height = 450,
                Location = new Point(localeX, localeY),
                Text = sql
            };
            qr.Show(this);
            sw.Start();
            if (ValidateSql(string.Empty, sql))
            {
                var task = await Task.Factory.StartNew(() => RunSql(sql)).ConfigureAwait(false);
                dt = task;
            }

            UpdateGridKeys();
            RowCount = dt.Rows.Count;
            sw.Stop();
            var resultText = Resources.VersionString + string.Format(Resources.RunReturnedRowsInMilliseconds,
                                 _currentDatabase, gridView1.RowCount, sw.ElapsedMilliseconds);
            Text = resultText;
            qr.Hide();
        }

        private void Form1KeyUp(object sender, KeyEventArgs e)
        {

        }

        [DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int wMsg, bool wParam, int lParam);
        private const int WmSetredraw = 11;
        public static void SuspendDrawing(Control control)
        {
            SendMessage(control.Handle, WmSetredraw, false, 0);
        }
        public static void ResumeDrawing(Control control)
        {
            SendMessage(control.Handle, WmSetredraw, true, 0);
            control.Refresh();
        }
        protected override CreateParams CreateParams
        {
            get
            {
                if (_originalExStyle == -1)
                    _originalExStyle = base.CreateParams.ExStyle;

                CreateParams cp = base.CreateParams;
                if (enableFormLevelDoubleBuffering)
                    cp.ExStyle |= 0x02000000;   // WS_EX_COMPOSITED
                else
                    cp.ExStyle = _originalExStyle;

                return cp;
            }
        }
        private void Form1ResizeBegin(object sender, EventArgs e)
        {

        }

        private void fileSaveItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            sqlEditControl.SaveDocument(this);
        }

        private void fileOpenItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if(!sqlEditControl.LoadDocument())
                e.Item.Enabled = true;

        }

        private void fileSaveAsItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            sqlEditControl.SaveDocumentAs(this);
        }
    }
}